import Agent from 'coap/dist/lib/agent';
import Server from 'coap/dist/lib/server';
import IncomingMessage from 'coap/dist/lib/incoming_message';
import OutgoingMessage from 'coap/dist/lib/outgoing_message';
import ObserveReadStream from 'coap/dist/lib/observe_read_stream';
import ObserveWriteStream from 'coap/dist/lib/observe_write_stream';
import { parameters, refreshTiming, defaultTiming } from 'coap/dist/lib/parameters';
import { registerOption, registerFormat, ignoreOption } from 'coap/dist/lib/option_converter';
import { CoapServerOptions, requestListener, CoapRequestParams, ParametersUpdate, AgentOptions, CoapPacket, Option, OptionValue } from 'coap/dist/models/models';
export declare let globalAgent: Agent;
export declare let globalAgentIPv6: Agent;
export declare function setGlobalAgent(agent: Agent): void;
export declare function setGlobalAgentV6(agent: Agent): void;
export declare function createServer(options?: CoapServerOptions | typeof requestListener, listener?: typeof requestListener): Server;
export declare function request(requestParams: CoapRequestParams | string): OutgoingMessage;
export { parameters, refreshTiming as updateTiming, defaultTiming, registerOption, registerFormat, ignoreOption, IncomingMessage, OutgoingMessage, ObserveReadStream, ObserveWriteStream, Agent, Server, ParametersUpdate, CoapRequestParams, AgentOptions, CoapPacket, Option, OptionValue, CoapServerOptions };
